{"version":3,"sources":["components/Timer/Timer.jsx","App.js","index.js"],"names":["Timer","useState","timerSec","setTimerSec","timerStatus","setTimerStatus","clickCount","setClickCount","useEffect","timer","Subject","interval","pipe","takeUntil","subscribe","time","next","complete","start","useCallback","stop","reset","wait","singleClickTimer","prevClickCount","setTimeout","clearTimeout","console","log","Date","toISOString","slice","className","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMA6EeA,EAzED,WACZ,MAAgCC,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsCF,mBAAS,QAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACR,IAAMC,EAAQ,IAAIC,IASlB,OARAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACW,QAAhBV,GACFD,GAAY,SAAAY,GAAI,OAAIA,EAAO,UAI1B,WACLN,EAAMO,OACNP,EAAMQ,cAEP,CAACb,IAEJ,IAAMc,EAAQC,uBAAY,WACxBd,EAAe,SACd,IAEGe,EAAOD,uBAAY,WACvBd,EAAe,QACfF,EAAY,KACX,IAEGkB,EAAQF,uBAAY,WACxBhB,EAAY,KACX,IAEGmB,EAAOH,uBAAY,WACvB,IAAII,EAEJhB,GAAc,SAAAiB,GAAc,OAAIA,EAAiB,KAE9B,IAAflB,IACFiB,EAAmBE,YAAW,WAC5BlB,EAAc,KACb,MAGc,IAAfD,IACFD,EAAe,QAEfqB,aAAaH,GACbhB,EAAc,IAGhBoB,QAAQC,IAAItB,KACX,CAACA,IAEJ,OACE,gCACE,qCAAQ,IAAIuB,KAAK3B,GAAU4B,cAAcC,MAAM,GAAI,OAClC,QAAhB3B,EACC,wBAAQ4B,UAAU,cAAcC,QAASb,EAAzC,kBAIA,wBAAQY,UAAU,eAAeC,QAASf,EAA1C,mBAIF,wBAAQe,QAASZ,EAAjB,mBACA,wBAAQY,QAASX,EAAjB,sBC9DSY,MARf,WACE,OACE,qBAAKF,UAAU,MAAf,SACE,cAAC,EAAD,OCDNG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e4e5c843.chunk.js","sourcesContent":["import { useEffect, useState, useCallback } from 'react';\r\nimport { interval, Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nconst Timer = () => {\r\n  const [timerSec, setTimerSec] = useState(0);\r\n  const [timerStatus, setTimerStatus] = useState('stop');\r\n  const [clickCount, setClickCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const timer = new Subject();\r\n    interval(1000)\r\n      .pipe(takeUntil(timer))\r\n      .subscribe(() => {\r\n        if (timerStatus === 'run') {\r\n          setTimerSec(time => time + 1000);\r\n        }\r\n      });\r\n\r\n    return () => {\r\n      timer.next();\r\n      timer.complete();\r\n    };\r\n  }, [timerStatus]);\r\n\r\n  const start = useCallback(() => {\r\n    setTimerStatus('run');\r\n  }, []);\r\n\r\n  const stop = useCallback(() => {\r\n    setTimerStatus('stop');\r\n    setTimerSec(0);\r\n  }, []);\r\n\r\n  const reset = useCallback(() => {\r\n    setTimerSec(0);\r\n  }, []);\r\n\r\n  const wait = useCallback(() => {\r\n    let singleClickTimer;\r\n\r\n    setClickCount(prevClickCount => prevClickCount + 1);\r\n\r\n    if (clickCount === 0) {\r\n      singleClickTimer = setTimeout(function () {\r\n        setClickCount(0);\r\n      }, 300);\r\n    }\r\n\r\n    if (clickCount === 1) {\r\n      setTimerStatus('wait');\r\n\r\n      clearTimeout(singleClickTimer);\r\n      setClickCount(0);\r\n    }\r\n\r\n    console.log(clickCount);\r\n  }, [clickCount]);\r\n\r\n  return (\r\n    <div>\r\n      <span> {new Date(timerSec).toISOString().slice(11, 19)}</span>\r\n      {timerStatus === 'run' ? (\r\n        <button className='stop-button' onClick={stop}>\r\n          Stop\r\n        </button>\r\n      ) : (\r\n        <button className='start-button' onClick={start}>\r\n          Start\r\n        </button>\r\n      )}\r\n      <button onClick={reset}>Reset</button>\r\n      <button onClick={wait}>Wait</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import Timer from './components/Timer';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}